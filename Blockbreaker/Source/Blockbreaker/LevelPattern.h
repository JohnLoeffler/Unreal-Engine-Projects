// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "UObject/NoExportTypes.h"
#include "Blockbreaker.h"
#include "BlockbreakerGameModeBase.h"
#include "LevelPattern.generated.h"


class MathFunction;

UCLASS()
class BLOCKBREAKER_API ULevelPattern : public UObject
{
  GENERATED_BODY()
public:
  /** ctor */
  ULevelPattern() { NumberOfValidBricks = 0; }
  /** dtor */
  virtual ~ULevelPattern() {}
	
  int32 NumberOfValidBricks;
  float RealHigh, RealLow;

  /** 
  * Generates a pattern on a 2D plane for use by the Level Builder to determine 
  *   the color to apply to the Brick Grid 
  * @param Width The Width of the Grid
  * @param Height The Height of the Grid
  * @param OutHigh The highest value in the grid
  * @param OutLow The lowest Value in the grid
  * @param Pattern The TArray of floats that will hold the pattern generated by 
  *                   the function
  * @param NumBricks The number of bricks generated by the function
  * @param Seed A number to seed the generator with
  * @returns True if successful, False if there is an error
  */
  virtual bool GenerateColorPattern(int32 Width, int32 Height, TArray<float>& Pattern,int32 Seed);

  /**
  * Generates a pattern on a 2D plane for use by the Level Builder to determine
  *   brick placement, type, color, etc
  * @param Width The Width of the Grid
  * @param Height The Height of the Grid
  * @param OutHigh The highest value in the grid
  * @param OutLow The lowest Value in the grid
  * @param Pattern The TArray of floats that will hold the information generated by
  *                   the function
  * @param NumBricks The number of bricks generated by the function
  * @param Seed A number to seed the generator with
  * @returns True if successful, False if there is an error
  */
  virtual bool GenerateBrickPattern(int32 Width, int32 Height, TArray<int32>& Pattern, int32 Seed, EGameDifficulty Dif = EGameDifficulty::NORMAL);
  /**
  * Plots out the locations of any special bricks for the level, like bombs, powerups, powerdowns, etc.
  * @param Width The Width of the Grid
  * @param Height The Height of the Grid
  * @param OutHigh The highest value in the grid
  * @param OutLow The lowest Value in the grid
  * @param Pattern The TArray of floats that will hold the pattern generated by
  *                   the function
  * @param NumBricks The number of bricks generated by the function
  * @param Seed A number to seed the generator with
  * @returns True if successful, False if there is an error
  */
  virtual bool GenerateSpecialData(int32 Width, int32 Height, TArray<int32>& Pattern, int32 Seed);
  
  /**
  * 
  *
  */
  bool ApplyColorFunctions(int32 const& Seed);

protected:
  struct Coord {
    int X, Y;
  };
  
  int32 H, W;
  Coord **Plane;
  float **RawOutput;
};


